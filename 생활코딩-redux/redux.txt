// redux?
- A predictable state container for Javascript Apps
js를 위한 예측 가능한 상태들의 저장소

- 예측 가능한?
우리는 코딩을 하는 과정에서 복잡한 상황에 마주침
이 복잡성을 낮추고 우리의 코드가 예측 가능하게 만들어주는게 목적

- 하나의 상태를 가진다. (single source of truth)
여러 데이터를 하나의 객체로 묶는다.

- 이 객체는 철저하게 외부에서 접근을 할 수 없고 특정한 경우에만 접근할 수 있다.
-> 예기치 않게 값이 변경되는 것을 방지
dispatch, reducer을 통해 접근
getState를 통해 가져옴
변경된 데이터에 따라 서로 작업을 실시

- redux를 통해 application의 상태를 이전보다 훨씬 예측가능하게 개선

- 이 수업은 html,css,js를 이용한 redux를 사용

// 동작 원리
- store
비유적으로 은행
정보가 저장된는 곳

- state
실제 정보가 저장되는 곳
집적 접촉하는 것은 절대 불가능

- reducer (함수)
state와 동시에 만들어줘야 함
매우 중요

- dispatch subscribe getState
은행원 같은 존재
-> getState = render가 호출되면 state 값을 가져놈
-> subscribe = state값이 변경될 때마다 render가 호출
-> dispatch
--1.reducer을 호출해서 state를 변경
현재의 state값과 action 데이터(객체, 타입)를 reducer에 전달
새로운 state를 return 

--2.subscribe를 이용해서 render을 호툴


- render
store 외부에 존재
ui를 만들어주는 내가 만든 코드
현재 state에 따른 결과(ui)를 보여줌

- action
store 외부에 존재
이벤트가 발생하면 dispatch에 전달됨

// redux를 쓰면 좋은 이유
- redux devtools을 통한 시간여행
- 상태 관리가 쉽다.